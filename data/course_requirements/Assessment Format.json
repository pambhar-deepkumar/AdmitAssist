{
  "Basics in Informatics": {
    "Modules": [
      {
        "Course": "Introduction to Informatics",
        "Max Credits Awarded": 6,
        "Content": "The module is concerned with topics such as: - Introduction ++ Basic notions: Problem - algorithm - program ++ Imperative programming constructs - Syntax and semantics ++ Syntax of programming languages: regular expressions and contextfree grammers ++ Semantics of programs: control-flow graphs - Basic data structures I ++ Numbers, strings, arrays ++ Insertion sort - Recursion ++ Binary search ++ Patterns of recursion - Basic data structures II ++ Objects, classes, methods ++ Lists, stacks, queues - Object-oriented programming ++ Inheritance ++ Abstract classes and interfaces ++ Polymorphism - Programming in the large (perspectives) - Concurrency and Threads",
        "Learning Outcome": "Upon successful completion of the module participants understand the essential concepts of computer science on a fundamental, practice-oriented, but scientific level. Concepts of this kind are for example: Algorithms, syntax and semantics, as well as efficiency in terms of memory consumption or time. Participants are then able to solve well-posed algorithmic problems and to implement basic distributed and concurrent applications in Java or a similar object-oriented language. They understand the underlying concepts and models and are therefore able to acquire skills in other imperative and object-oriented programming languages on their own.",
        "Name Location":"B32:B41",
        "Credits Location":"E32:E41",
        "Evaluation Result Location":"H32:H41",
        "Comments Location":"I32:I41"
      },
      {
        "Course": "Fundamentals of Programming (Exercises & Laboratory)",
        "Max Credits Awarded": 6,
        "Content": "Accompanying the module IN0001, assignments may excercise and apply for problem solving concepts, such as: - basic data structures - recursion - objects, classes and methods - lists, queues, and trees - advanced concepts of object-oriented programming - concurrency",
        "Learning Outcome": "After successful completion of the module, participants are acquainted with the programming language Java or a similar object-oriented programming languae and master programming in the small. They are able to realize programs on their own and to apply the fundamental concepts of Informatics as taught in module IN0001, on a basic practical but scientific level.",
        "Name Location":"B42:B51",
        "Credits Location":"E42:E51",
        "Evaluation Result Location":"H42:H51",
        "Comments Location":"I42:I51"
      },
      {
        "Course": "Introduction to Computer Organization and Technology - Computer Architecture",
        "Max Credits Awarded": 8,
        "Content": "- Computer systems: basic architecture and organization: Von- Neumann-Computer, machine-instruction cycle, hardware-software interface - The Instruction Set Architecture (ISA): functionality and machineoriented Assembler programming - Micro-programmed implementation of machine instructions - Circuits, sequential circuits, circuit design with a formal language using the example of VHDL - Introduction to computer architecture: microprocessor architectures and systems, parallel and distributed systems,memory systems, I/O",
        "Learning Outcome": "After attending this module, students are able to understand computer systems as layered abstract machines. They get a first impression of the area of computer architectures and possess the following abilities: They have learned to apply the main concepts of machine-oriented programming, microprogramming and circuit design. They understand the machine instruction cycles based on the underlying hardware at the register transfer level and they are able to classify computer architectures. The understand the basics of modern computer architecture.",
        "Name Location":"B52:B61",
        "Credits Location":"E52:E61",
        "Evaluation Result Location":"H52:H61",
        "Comments Location":"I52:I61"
      },
      {
        "Course": "Introduction to Software Engineering",
        "Max Credits Awarded": 6,
        "Content": "Software engineering is the the establishment and systematic use of engineering principles, methods, and tools for the division of work, the development and application of extensive, complex software systems. It deals with the production and development of software, the organization and modelling of data structures and objects, and the operation of software systems. Topics of the lecture include, among others: - Modeling with UML - Process models in software development (linear, iterative, agile) - Requirements elicitation and analysis (functional model, dynamic model, and object model) - System design (specification, software architecture, architectural patterns, and design goals) - Object design and implementation (reuse, design patterns, and interface specification) - Testing (component test, integration test, and system test) - Configuration management, build management, and release management - Software maintenance and evolution - Project organization and communication",
        "Learning Outcome": "After successful completion of this module, students are familiar with the basic concepts and methods of the different phases of a project, e.g. modeling the problem, reuse of classes and components, and delivery of the software. They have the ability to select and apply suitable concepts and methods for concrete problems. The students know the most important software engineering terms and workflows and are able to analyze and evaluate given problems. In addition, students can solve concrete problems in software engineering, e.g. with the help of design patterns.",
        "Name Location":"B62:B71",
        "Credits Location":"E62:E71",
        "Evaluation Result Location":"H62:H71",
        "Comments Location":"I62:I71"
      },
      {
        "Course": "Operating Systems and System Software",
        "Max Credits Awarded": 6,
        "Content": "Basic concepts: Operating systems; concurrency; parallel programming; low-level programming (processes, memory, communication, resource management; models (abstract, formal) for concurrency, e.g. petri nets; mutual exclusion, synchronization, deadlocks; compiler/linker/loader with library integration, transition to (adequate) hardware basic, machine-oriented programming and C; I/O especially as preparation for networking)",
        "Learning Outcome": "After visiting this module, students are able to understand the basics, problems and solutions of operating systems and current developments. In addition they understand the components like process and memory management and they are able to analyze and evaluate different strategies and techniques. They learn to apply the acquired basic knowledge to new developments in the area of operating systems as well as system software.",
        "Name Location":"B72:B81",
        "Credits Location":"E72:E81",
        "Evaluation Result Location":"H72:H81",
        "Comments Location":"I72:I81"
      },
      {
        "Course": "Fundamentals of Algorithms and Data Structures",
        "Max Credits Awarded": 6,
        "Content": "First, the module studies the basics of efficiency and complexity analyses. Basic terminology, complexity measures, the Landau symbols and different machine models are introduced. Then, fundamental data structures and algorithmic problems are studied. - Data structures for sequences: Dynamic arrays, lists, stacks and queues are investigated. The complexity of each operation is analyzed. - Hashing: Hashing with chaining, universal hashing as well as various probing methods are examined. Perfect hashing and hash-based algorithms, e.g. for set intersection problems, may also be explored. - Sorting: First, simple algorithms such as InsertionSort, SelectionSort and BubbleSort are reviewed. Then, advanced algorithms such as MergeSort, HeapSort and QuickSort are investigated. Furthermore, sorting-based algorithms, the lower bound for comparison-based sorting, selection, RadixSort and external sorting may be covered. - Priority queues: Binary heaps and binomial heaps are presented in the module. - Search trees: Binary search trees, AVL trees and (a,b)-trees are investigated. - Graph algorithms: Various graph representations, traversal techniques using DFS/BFS, the computation of 2-connected components and strongly connected components, topological sorting, the computation of the shortest paths and minimum spanning trees are covered. Approaches for solving the Traveling Salesman Problem (TSP) may be studied. The module may also cover data compression schemes (Huffman, Lempel-Ziv) and simple pattern matching algorithms.",
        "Learning Outcome": "The participants master the basic algorithms and data structures mentioned above. They are able to independently analyze their complexity and apply the corresponding analysis concepts to related algorithmic problems. Furthermore, the participants are able to use the algorithms and data structures handled, if necessary to modify them and to compare different solutions in their quality.",
        "Name Location":"B82:B91",
        "Credits Location":"E82:E91",
        "Evaluation Result Location":"H82:H91",
        "Comments Location":"I82:I91"
      },
      {
        "Course": "Fundamentals of Databases",
        "Max Credits Awarded": 6,
        "Content": "SQL, data integrity, theory of relational database design, physical data organisation (storage structures, index structures), query processing, transaction management, main features of error handling (recovery, backup) and multiuser synchronisation, security aspects (authorization), XML data modeling (optional); in the tutorial the content is practiced along concrete examples",
        "Learning Outcome": "Students are able to apply the essential concepts of relational database systems and can use and evaluate them systematically and in a qualified manner. The students have the expertise to systematically use a database system starting from the conceptual design to the implementation design to the physical design. They are able to formulate even complex queries in SQL and have a basic understanding of logical and physical optimization based on relational algebra. Furthermore they know how to safe-guard a database application with respect to recovery, concurrency control and authorization.",
        "Name Location":"B92:B101",
        "Credits Location":"E92:E101",
        "Evaluation Result Location":"H92:H101",
        "Comments Location":"I92:I101"
      },
      {
        "Course": "Computer Networking and IT Security",
        "Max Credits Awarded": 6,
        "Content": "- Computer networking ++ Overview: Computer networking and the Internet +++ components (router, switches, clients, server) +++ design (topology, routing, packets vs. virtual circuits) +++ layered system structure (OSI and Internet) +++ historical background ++ concepts used by multiple layers (covered within the appropriate layers): +++ Addressing +++ Error detection +++ Coding and modulation +++ Media access protocols +++ Flow control +++ Connection management +++ Packet vs. virtual circuit switching ++ Layers: +++ Application layer: application protocols and applications ++++ Tasks and interface ++++ Examples: HTTP, DNS, SMTP (Mail), Peer-to-Peer protocols +++ Transport layer ++++ Tasks and interface ++++ Examples: TCP and UDP +++ Network layer ++++ Tasks and interface ++++ Routing: link state vs. distance vector protocols ++++ Addressing: IP Addresses ++++ Examples: IP, Routing in the Internet +++ Link layer ++++ Tasks and interface ++++ Examples: Ethernet, Wireless LAN +++ Physical layer ++++ Tasks and interface ++++ Examples ++ IT security +++ Basics of cryptography +++ Authentication, privacy, integrity +++ Protocols with security mechanisms, e.g.: IPsec, PGP, Kerberos, SSL, SSH, ... +++ Firewalls, intrusion detection",
        "Learning Outcome": "After successful completion of the module, participants understand the key concepts of technologies and methods of computer networks and distributed systems and are able to use key layered network architecture protocols to explain what protocol mechanisms are used in each layer and how they work. They understand the architecture of distributed applications like the World Wide Web based on Internet protocols, and the architecture of computer networks. Participants can determine the performance of selected networks and distributed applications, and can implement specific protocol mechanisms.",
        "Name Location":"B102:B111",
        "Credits Location":"E102:E111",
        "Evaluation Result Location":"H102:H111",
        "Comments Location":"I102:I111"
      }
    ],
    "Total Credits": 50,
    "Required credits": "40",
    "Awarded Points": "25"
  },
  "Basics in the field of theoretical informatics": {
    "Modules": [
      {
        "Course": "Information Theory and Theoretical Informatics",
        "Minimum Credits": 6,
        "Content": "Formal languages, grammars, Chomsky hierarchy. Regular languages: DFA, NFA with and without ε-transitions, regular expressions and translations between them; systems of language equations; closure under boolean operations; Arden’s lemma; pumping lemma; decision problems; minimization; Myhill-Nerode theorem. CFLs: PDAs and translation between CFGs and PDAs; proof that DPDAs are weaker than PDAs; closure properties; CYK algorithm; pumping lemma; Chomsky and Greibach normal forms. Context-sensitive languages and LBAs. Computability: computability, decidability, semi-decidability, recursive-enumerability and their relationships; existence of non-computable problems; Turing machines, accepted languages, type-0 languages: equivalence of Turig machines, While-programs and Goto-programs; primitive and μ-recursive functions; reductions between problems; the Halting problem; universal Turing machines; Rice’s theorem; Rice-Shapiro theorem; undecidability of the Post Correspondence Problem and important problems on CFGs. Complexity theory: time and space complexity classes; polynomial-time reductions; the classes P and NP; NP completeness; Cook’s theorem; important NP-complete problems and reductions between them. Foundations of information theory",
        "Learning Outcome": "After successfully completing this module, the students understand the core concepts of the theory of computation on a basic but scientific level. They know what regular expressions, contextfree grammars, the Chomsky hierarchy, finite automata and Turing machines are. They can define formal languages with the appropriate grammars or machines. They can prove that a given language cannot be defined with a given class of grammars or machines. They can prove that certain grammars and machines are equivalent and they can transform them into each other algorithmically. They can explain the basic concepts of complexity theory and can reduce decision problems algorithmically to each other under given complexity limitations.",
        "Name Location":"B117:B126",
        "Credits Location":"E117:E126",
        "Evaluation Result Location":"H117:H126",
        "Comments Location":"I117:I126"
      }
    ],
    "Total Credits": 6,
    "Required credits": "5",
    "Awarded Points": "5"
  },
  "Basics in the field of Cyberphysical Systems": {
    "modules": [
      {
        "Course": "Introduction to Signal Processing",
        "Minimum Credits": 6,
        "Content": "Signals and systems in time and frequency domain, examples, discretization, filter and frequency transforms, compression, realization (signal processors), outlook to digital image processing",
        "Learning Outcome": "At the end of this module students are able to evaluate theoretical concepts and underlying algorithms of modern digital signal processing systems. In the exercise course, the students learn to apply these concepts to a concrete problem and to decide on a proper implementation.",
        "Name Location":"B132:B141",
        "Credits Location":"E132:E141",
        "Evaluation Result Location":"H132:H141",
        "Comments Location":"I132:I141"
      },
      {
        "Course": "Embedded Systems, Cyber-Physical Systems and Robotics",
        "Minimum Credits": 8,
        "Content": "Embedded systems control and regulate many applications in everyday life, from smart refrigerators, through elevator control, traffic control and safety, automotive systems, etc. to critical and distributed infrastructures. The design of an embedded system requires understanding of the controller s architecture but also knowledge to handle the right integration of this controller with the sensors and actuators of the physical system. This course provides an understanding of the problems an engineer will face when designing an embedded system: the selection of the controller s architecture, the interfacing with physical sensors and actuators, the modelling of the system and the interaction between its software and hardware components, as well as the analysis of its reachability and real-time performance. This course will emphasize on designing highly confident systems with real-time and concurrent behaviors. This course will also emphasize the similarities and differences between the following architectures of controllers: programmable logic controllers (PLC), single-board computers (SBC), and field-programmable gate arrays (FPGA).",
        "Learning Outcome": "On successful completion of the course, students will be able to: - explain the main concepts necessary to model, implement and analyze embedded systems - describe the architecture of embedded controllers - explain the interfacing between a controller and its physical environment (sensors and actuators) and its effects to the modeling of an embedded system - explain the principles and models of concurrent computation - calculate composition of state machines according to different kinds of composition - explain characteristics of multitasking program and scheduling policies - express and analyze simple specifications using temporal logic - explain the different techniques used to perform reachability and real-time analyses - model cyber-physical systems - design, analyze, and control cyber-physical systems on a basic level",
        "Name Location":"B142:B151",
        "Credits Location":"E142:E151",
        "Evaluation Result Location":"H142:H151",
        "Comments Location":"I142:I151"
      }
    ],
    "Total Credits": 14,
    "Required credits": "5",
    "Awarded Points": "5"
  },
  "Basics in the field of information systems": {
    "Modules": [
      {
        "Course": "Enterprise Architecture Management and Reference Models",
        "Minimum Credits": 6,
        "Content": "- Enterprise Architecture Management - Case studies - Reference modeling - Domainspecific reference models - Logistic (Procurement & Distribution) - Accounting - Production I: Overview and Requirements Planning I - Production II: Requirements Planning II - Production III: Time and Capacity Planning - Supply Chain Management (SCM) - Service Data Management",
        "Learning Outcome": "Students possess specific knowledge of Enterprise Architecture Management, involving corresponding models, methods, metrics, visualizations and tools. Furthermore, students are able to: - understand organizational information systems and their inter-organizational integration - evaluate the design and the main relationships of the information logistics of organizational information systems within - selected organizational functions - apply modeling techniques for complex business models - evaluate reference models based on the organizational context",
        "Name Location":"B157:B166",
        "Credits Location":"E157:E166",
        "Evaluation Result Location":"H157:H166",
        "Comments Location":"I157:I166"
      },
      {
        "Course": "Business Process Management",
        "Minimum Credits": 5,
        "Content": "Business Process Management: Knowledge and understanding in the field of business processes and the role of technology herein. • Business processes and the way they build the success of firms and institutions. • Modeling and criteria of business processes and their opportunities and possibilities. • Business processes: Risk management, decision making and successful control and change. • Developments in technology and their implications for organizations. • The role of IT in modern business and competition: What technology should my firm invest in?",
        "Learning Outcome": "After participating in this module, students are able to understand business processes and their interaction with IT Technology. Furthermore, they are able to analyze and create Business Process Management-Projects. Students are able to evaluate the interaction of Information and Communication Technology and business processes and to improve these.",
        "Name Location":"B167:B176",
        "Credits Location":"E167:E176",
        "Evaluation Result Location":"H167:H176",
        "Comments Location":"I167:I176"
      }
    ],
    "Total Credits": 11,
    "Required credits": "5",
    "Awarded Points": "5"
  },
  "Mathematical and theoretical basics": {
    "Modules": [
      {
        "Course": "Discrete Structures",
        "Minimum Credits": 8,
        "Content": "The lecture introduces elementary concepts and important areas of discrete mathematics that are relevant for informatics students. It covers the following five topics: 1) Basic concepts of sets, relations and functions: - sets: basic operations, equivalence laws, KV-diagram, countable and uncountable sets, Cantor's Theorem - relations: join, transitive hull, relational algebra - functions: basic properties, composition, inverse 2) Fundamentals of Propositional Logic and First-Order Logic: - Propositional Logic: - syntax and semantics - truth tables and their connection to KV-diagrams - equivalence laws - CNF, DNF, normalization procedure, equisatisfiability - SAT-procedure: DPLL, resolution, proof of correctness - modelling with propositional logic - Predicate Logic: - syntax and semantics - equivalence laws - modelling with predicate logic 3) Basics of combinatorics: - counting principles - drawing of balls from urns: variations, permutations, combinations - binomial coefficients: symmetry, identities of Pascal and Vandermonde - distribution problems - Stirling-numbers of the first and second kind - ordered and unordered partition functions - application: load distribution 4) Basics of graph theory: - basic definitions - trees - Euler and Hamilton circuits: Euler's theorem, theorems of Dirac and Ore - planar graphs: Euler's polyhedron formula, Kuratowski's theorem - matchings: marriage theorem, augmenting paths - matchings with preferences: Gale-Shapley's theorem 5) Algebraic basics: - basic definitions: algebra, group, ring, field - groups: - order: Lagrange's theorem, generator, group exponent - cyclic groups - basics of number theory: largest common divisor, extended euclidean algorithm, Euler's phi function - multiplicative groups of integers modulo n - RSA",
        "Learning Outcome": "On successful completion of the module, students will be able to - understand the elementary vocabulary of discrete mathematics and use logic, algebraic und algorithmic calculi, - solve combinatoric problems, - model and solve problems using graph theory, and - do a quantitive analysis of the efficiency of algorithms.",
        "Name Location":"B182:B191",
        "Credits Location":"E182:E191",
        "Evaluation Result Location":"H182:H191",
        "Comments Location":"I182:I191"
      },
      {
        "Course": "Computational Mathematics 1 - Linear Algebra",
        "Minimum Credits": 8,
        "Content": "- Complex numbers - Vector and matrix calculus - Systems of linear equations - Vector spaces - Linear combinations and bases - Dimension - Linear maps and representation matrices - Determinants - Eigenvalues - Scalar products - Symmetric matrices",
        "Learning Outcome": "After having attended this module, the students are familiar with the basic notions and methods of linear algebra. They are proficient in vector and matrix calculus as well as in the theory and application of linear mappings including their representation by matrices, and they are aware of determinants and eigenvalues as an essential characteristics of matrices. The students can handle the objects of liner algebra in computational and algorithmic ways, and can apply this to problems in computer science.",
        "Name Location":"B192:B201",
        "Credits Location":"E192:E201",
        "Evaluation Result Location":"H192:H201",
        "Comments Location":"I192:I201"
      },
      {
        "Course": "Computational Mathematics 2 - Analysis",
        "Minimum Credits": 8,
        "Content": "Basics on real numbers: Ordering of the real numbers Infimum, supremum Rational numbers are dense in the reals Triangle inequality, Cauchy Schwarz inequality Sequences: Convergence in C and R Improper convergence (convergence to plus/minus infinity) Properties of limits asymptotic equality of sequences monotone sequences Series: Convergence and absolute convergence of series Important examples: harmonic series, geometric series, exponential series, alternating series Criteria for convergence (among others comparison test, ratio test) Rearrangement, Cauchy product Continuity: Intermediate value theorem Minima and maxima of continuous functions Compact sets Inverse functions Important classes of functions: Polynomials Rational functions Exponential function and logarithm Trigonometric functions Differentiability of functions of a single variable: Landau symbols Differentiation rules (product rule, quotient rule, chain rule, derivative of the inverse function) Mean value theorem Higher derivatives Taylor formula Power series L'Hospital's rule Curve sketching Integration in one variable: Fundamental theorem of calculus Antiderivative Integration by parts, substitution rule Improper integrals Integrals depending on a parameter Differential calculus of functions of several variables: partial derivatives, gradient, Jacobi and Hesse matrix Necessary and sufficient criteria for local extrema Plane curves Elementary introduction to differential equations: Classification, examples Initial value problems for separable equations Linear differential equations",
        "Learning Outcome": "Having attended this module, the students are able to understand the elementary notions and methods of real analysis as well as of convergence and approximation. They are moreover able to apply the methods of differential calculus of functions of a single and of several variables, as well as of integral calculus of a function of a single variable, and they understand important function classes and simple examples of differential equations.",
        "Name Location":"B202:B211",
        "Credits Location":"E202:E211",
        "Evaluation Result Location":"H202:H211",
        "Comments Location":"I202:I211"
      },
      {
        "Course": "Discrete Probability Theory",
        "Minimum Credits": 6,
        "Content": "-Fundamentals of (discrete) probability theory ++ probability spaces, events, principle of inclusion/exclusion, Boolean inequality, conditional probability, multiplication theorem, total probability theorem, Bayesian theorem, independence ++ random variables, expected value, variance, linearity of expected value, conditional random variables and their expected value, variance, moments and central moments, several random variables and their common density & distribution, independence from random variables, moments of composite random variables, indicator variables ++ discrete distributions: Bernoulli distribution, binomial distribution, geometric distribution, coupon collector problem, Poisson distribution, relationships among distributions ++ methods for estimating probabilities, inequalities of Markov and Chebyshev, Chernoff barriers ++ Law of large numbers ++ Probability-generating functions and their application to distributions, moment-generating functions with various applications -continuous probability spaces ++ continuous random variables, Kolmogorov axioms, sigma algebras, Lebesgue integrals, computing with continuous random variables, simulation of random variables ++ continuous distributions: Equal distribution, normal distribution and linear transformation, exponential distribution and waiting processes, relationship with discrete distributions ++ several continuous random variables, boundary distributions and independence, sums of random variables ++ Moment generating functions for continuous random variables ++ Central limit theorem -Inductive Statistics ++ estimation variables, maximum likelihood principle, confidence intervals, hypothesis testing, statistical test development and application -Stochastic processes ++ processes with discrete time, Markov chains, transition probabilities, arrival probabilities, transition times, return times, fundamental theorem for ergodic Markov chains",
        "Learning Outcome": "After successful completion of the module - Participants are familiar with important concepts of discrete and continuous probability spaces and stochastic processes and can in large part deduce them themselves - master calculation rules for the determination and estimation of probabilities, expected values and variances, - are able to map real problems to abstract probability spaces and - can easily apply simple statistical tests.",
        "Name Location":"B212:B221",
        "Credits Location":"E212:E221",
        "Evaluation Result Location":"H212:H221",
        "Comments Location":"I212:I221"
      }
    ],
    "Total Credits": 30,
    "Required credits": "25",
    "Awarded Points": "15"
  }
}
